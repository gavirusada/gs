import React, { useState, useEffect, useRef } from 'react';
import { Calculator } from 'lucide-react';

const FourDInteractiveApp = () => {
  // State for different sections
  const [activeSection, setActiveSection] = useState('calculator');
  const [numberConversion, setNumberConversion] = useState({
    inputNumber: '',
    fromBase: 10,
    toBase: 2,
    result: ''
  });
  const [backgroundStyle, setBackgroundStyle] = useState({
    backgroundColor: '#121212'
  });
  const canvasRef = useRef(null);

  // 4D Background Animation
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const time = Date.now() / 1000;
      
      // 4D-inspired particle system
      for (let i = 0; i < 200; i++) {
        const x = Math.sin(time + i * 0.1) * canvas.width / 2 + canvas.width / 2;
        const y = Math.cos(time + i * 0.1) * canvas.height / 2 + canvas.height / 2;
        const radius = Math.abs(Math.sin(time + i * 0.2)) * 15 + 5;
        
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        
        // Hyperdimensional color shifting
        ctx.fillStyle = `hsl(${(time * 50 + i * 2) % 360}, 70%, 60%)`;
        ctx.globalAlpha = Math.abs(Math.sin(time + i * 0.1));
        ctx.fill();
      }
      
      requestAnimationFrame(animate);
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, []);

  // Number Conversion Logic
  const handleNumberConversion = () => {
    try {
      const decimal = parseInt(numberConversion.inputNumber, numberConversion.fromBase);
      const converted = decimal.toString(numberConversion.toBase).toUpperCase();
      
      setNumberConversion(prev => ({
        ...prev,
        result: converted
      }));
    } catch (error) {
      setNumberConversion(prev => ({
        ...prev,
        result: 'Invalid Input!'
      }));
    }
  };

  // Calculator Logic
  const [calculatorState, setCalculatorState] = useState({
    currentNumber: '',
    previousNumber: '',
    operation: null
  });

  const appendNumber = (number) => {
    setCalculatorState(prev => ({
      ...prev,
      currentNumber: prev.currentNumber + number
    }));
  };

  const setOperation = (op) => {
    if (calculatorState.currentNumber === '') return;
    if (calculatorState.previousNumber !== '') calculate();
    
    setCalculatorState(prev => ({
      ...prev,
      operation: op,
      previousNumber: prev.currentNumber,
      currentNumber: ''
    }));
  };

  const calculate = () => {
    const prev = parseFloat(calculatorState.previousNumber);
    const current = parseFloat(calculatorState.currentNumber);
    
    if (isNaN(prev) || isNaN(current)) return;
    
    let result;
    switch (calculatorState.operation) {
      case '+': result = prev + current; break;
      case '-': result = prev - current; break;
      case '*': result = prev * current; break;
      case '/': result = prev / current; break;
      default: return;
    }
    
    setCalculatorState({
      currentNumber: result.toString(),
      previousNumber: '',
      operation: null
    });
  };

  const clearCalculator = () => {
    setCalculatorState({
      currentNumber: '',
      previousNumber: '',
      operation: null
    });
  };

  // Render Methods
  const renderCalculator = () => (
    <div className="bg-black/50 p-6 rounded-xl">
      <div className="grid grid-cols-4 gap-4">
        <div className="col-span-4 bg-blue-900/50 rounded p-4 text-right text-3xl text-white">
          {calculatorState.currentNumber || '0'}
        </div>
        {['7','8','9','÷','4','5','6','×','1','2','3','-','0','C','=','+'].map((symbol, index) => (
          <button 
            key={symbol} 
            className="bg-blue-600 hover:bg-blue-500 text-white p-4 rounded text-2xl"
            onClick={() => {
              switch(symbol) {
                case '÷': setOperation('/'); break;
                case '×': setOperation('*'); break;
                case '-': setOperation('-'); break;
                case '+': setOperation('+'); break;
                case '=': calculate(); break;
                case 'C': clearCalculator(); break;
                default: appendNumber(symbol);
              }
            }}
          >
            {symbol}
          </button>
        ))}
      </div>
    </div>
  );

  const renderNumberConverter = () => (
    <div className="bg-indigo-900/50 p-6 rounded-xl">
      <div className="space-y-4">
        <input 
          type="text" 
          value={numberConversion.inputNumber}
          onChange={(e) => setNumberConversion(prev => ({
            ...prev, 
            inputNumber: e.target.value
          }))}
          placeholder="Enter number"
          className="w-full p-2 rounded bg-white/20 text-white"
        />
        <div className="flex space-x-4">
          <select 
            value={numberConversion.fromBase}
            onChange={(e) => setNumberConversion(prev => ({
              ...prev, 
              fromBase: parseInt(e.target.value)
            }))}
            className="w-1/2 p-2 rounded bg-white/20 text-white"
          >
            {[2, 8, 10, 16].map(base => (
              <option key={base} value={base}>
                {base === 2 ? 'Binary' : 
                 base === 8 ? 'Octal' : 
                 base === 10 ? 'Decimal' : 'Hexadecimal'}
              </option>
            ))}
          </select>
          <select 
            value={numberConversion.toBase}
            onChange={(e) => setNumberConversion(prev => ({
              ...prev, 
              toBase: parseInt(e.target.value)
            }))}
            className="w-1/2 p-2 rounded bg-white/20 text-white"
          >
            {[2, 8, 10, 16].map(base => (
              <option key={base} value={base}>
                {base === 2 ? 'Binary' : 
                 base === 8 ? 'Octal' : 
                 base === 10 ? 'Decimal' : 'Hexadecimal'}
              </option>
            ))}
          </select>
        </div>
        <button 
          onClick={handleNumberConversion}
          className="w-full bg-purple-600 hover:bg-purple-500 p-2 rounded text-white"
        >
          Convert
        </button>
        <div className="bg-white/20 p-2 rounded text-center text-white">
          Result: {numberConversion.result || 'Conversion Result'}
        </div>
      </div>
    </div>
  );

  const renderSocialLinks = () => (
    <div className="bg-gray-900/50 p-6 rounded-xl">
      <div className="flex justify-center space-x-6">
        {[
          { 
            name: 'TikTok', 
            url: 'https://vm.tiktok.com/ZS6eRF6tv/', 
            icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/TikTok_logo_2021.svg/1200px-TikTok_logo_2021.svg.png' 
          },
          { 
            name: 'Facebook', 
            url: 'https://www.facebook.com/share/1PaXuhSutZ/', 
            icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Facebook_f_logo_%282019%29.svg/1024px-Facebook_f_logo_%282019%29.svg.png' 
          },
          { 
            name: 'YouTube', 
            url: 'https://youtube.com/@gavirusandiptha_?si=Eg1jgEDlXMVFjAhs', 
            icon: 'https://upload.wikimedia.org/wikipedia/commons/4/42/YouTube_icon_%282013-2017%29.png' 
          }
        ].map((social) => (
          <a 
            key={social.name} 
            href={social.url} 
            target="_blank" 
            rel="noopener noreferrer"
            className="transform transition hover:scale-110"
          >
            <img 
              src={social.icon} 
              alt={social.name} 
              className="w-16 h-16 object-contain"
            />
          </a>
        ))}
      </div>
    </div>
  );

  // Change background color periodically
  useEffect(() => {
    const colorInterval = setInterval(() => {
      setBackgroundStyle({
        backgroundColor: `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`
      });
    }, 5000);

    return () => clearInterval(colorInterval);
  }, []);

  return (
    <div 
      className="min-h-screen flex flex-col items-center justify-center p-4 relative overflow-hidden"
      style={backgroundStyle}
    >
      {/* 4D Background Canvas */}
      <canvas 
        ref={canvasRef} 
        className="absolute top-0 left-0 w-full h-full z-0"
      />

      {/* Main Content */}
      <div className="relative z-10 w-full max-w-4xl">
        <div className="flex justify-center space-x-4 mb-6">
          {[
            { name: 'Calculator', icon: <Calculator /> },
            { name: 'Number Converter', icon: '↔️' },
            { name: 'Social Links', icon: '🌐' }
          ].map((section) => (
            <button
              key={section.name}
              onClick={() => setActiveSection(section.name.toLowerCase().replace(' ', ''))}
              className={`
                px-4 py-2 rounded flex items-center space-x-2
                ${activeSection === section.name.toLowerCase().replace(' ', '') 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}
              `}
            >
              {section.icon}
              <span>{section.name}</span>
            </button>
          ))}
        </div>

        {activeSection === 'calculator' && renderCalculator()}
        {activeSection === 'numberconverter' && renderNumberConverter()}
        {activeSection === 'sociallinks' && renderSocialLinks()}
      </div>
    </div>
  );
};

export default FourDInteractiveApp;
